CREATE DATABASE MOCKBUSTER;

USE MOCKBUSTER;

CREATE TABLE RENTAL 

(RE_ID INT NOT NULL AUTO_INCREMENT,

PRIMARY KEY (RE_ID),

RE_DATE DATE NOT NULL,

VG_ID INT NOT NULL,

EM_ID INT NOT NULL,

BR_ID INT NOT NULL,

CU_ID INT NOT NULL,

DUE_DATE DATE NOT NULL);

CREATE TABLE EMPLOYEE

(EM_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (EM_ID),

EM_FIRST_NAME VARCHAR(20),

EM_LAST_NAME VARCHAR(20),

EM_PAY_RATE DECIMAL(5,2),

EM_PHONE_NUM VARCHAR(20),

EM_DOB DATE,

EM_SS_NUM VARCHAR(20),

EM_ADDRESS VARCHAR(40),

BR_ID INT NOT NULL

);

CREATE TABLE MANAGER
(
MA_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (MA_ID),

EM_ID INT NOT NULL,

BR_ID INT NOT NULL
);

CREATE TABLE CUSTOMER
(
CU_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (CU_ID),

CU_FIRST_NAME VARCHAR(20),

CU_LAST_NAME VARCHAR(20),

CU_PHONE_NUM VARCHAR(20),

CU_ADDRESS VARCHAR(60)
);

CREATE TABLE VIDEO_GAME
(
VG_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (VG_ID),

VD_ID INT,

VG_COPIES_OWNED INT,

VG_COPIES_RENTED INT,

BR_ID INT NOT NULL
);

CREATE TABLE VIDEO_DETAIL
(
VD_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (VD_ID),

VD_NAME VARCHAR(40),

VD_GENRE VARCHAR(20),

VD_PUBLISHER VARCHAR(40)

);

CREATE TABLE PURCHASE_HIST
(
PH_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (PH_ID),

PH_DATE DATE,

VG_ID INT NOT NULL,

BR_ID INT NOT NULL,

NUM_PURCHASED INT,

IND_COST DECIMAL(5,2),

TOT_COST DECIMAL(7,2),

VE_ID INT NOT NULL,

MA_ID INT NOT NULL
);

CREATE TABLE RENTAL_HIST
(
RH_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (RH_ID),

RH_DATE DATE,

VG_ID INT NOT NULL,

CU_ID INT NOT NULL,

EM_ID INT NOT NULL,

BR_ID INT NOT NULL
);

CREATE TABLE VENDOR
(
VE_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (VE_ID),

VE_NAME VARCHAR(40),

VE_PHONE_NUM VARCHAR(20),

VE_ADDRESS VARCHAR(60)
);

CREATE TABLE BRANCH
(
BR_ID INT NOT NULL AUTO_INCREMENT,
PRIMARY KEY (BR_ID),

BR_ADDRESS VARCHAR(60),

BR_PHONE_NUM VARCHAR(20),

MA_ID INT
);

ALTER TABLE RENTAL
	ADD FOREIGN KEY (VG_ID) REFERENCES VIDEO_GAME(VG_ID),
	ADD FOREIGN KEY (EM_ID) REFERENCES EMPLOYEE(EM_ID),
	ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID),
	ADD FOREIGN KEY (CU_ID) REFERENCES CUSTOMER(CU_ID);
    
ALTER TABLE EMPLOYEE
	ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID);

ALTER TABLE MANAGER
	ADD FOREIGN KEY (EM_ID) REFERENCES EMPLOYEE(EM_ID),
    ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID);
    
ALTER TABLE VIDEO_GAME
	ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID),
    ADD FOREIGN KEY (VD_ID) REFERENCES VIDEO_DETAIL(VD_ID);
    
ALTER TABLE PURCHASE_HIST
	ADD FOREIGN KEY (VG_ID) REFERENCES VIDEO_GAME(VG_ID),
    ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID),
    ADD FOREIGN KEY (VE_ID) REFERENCES VENDOR(VE_ID),
    ADD FOREIGN KEY (MA_ID) REFERENCES MANAGER(MA_ID);
    
ALTER TABLE RENTAL_HIST
	ADD FOREIGN KEY (VG_ID) REFERENCES VIDEO_GAME(VG_ID),
    ADD FOREIGN KEY (BR_ID) REFERENCES BRANCH(BR_ID),
    ADD FOREIGN KEY (EM_ID) REFERENCES EMPLOYEE(EM_ID),
    ADD FOREIGN KEY (CU_ID) REFERENCES CUSTOMER(CU_ID);

ALTER TABLE BRANCH
	ADD FOREIGN KEY (MA_ID) REFERENCES MANAGER(MA_ID);
    
DELIMITER $$
CREATE TRIGGER AFTER_RENTAL_INSERT 
    AFTER INSERT ON RENTAL
    FOR EACH ROW 
BEGIN
    INSERT INTO RENTAL_HIST (RH_DATE,VG_ID,CU_ID,EM_ID,BR_ID)
		Values (NEW.RE_DATE,NEW.VG_ID,NEW.CU_ID,NEW.EM_ID,NEW.BR_ID);
     
    UPDATE VIDEO_GAME
		SET VG_COPIES_RENTED = VG_COPIES_RENTED + 1 WHERE VG_ID = NEW.VG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER BEFORE_RENTAL_DELETE 
    BEFORE DELETE ON RENTAL
    FOR EACH ROW 
BEGIN
        UPDATE VIDEO_GAME
		SET VG_COPIES_RENTED = VG_COPIES_RENTED -1  WHERE VG_ID = OLD.VG_ID;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER AFTER_PURCHASE_HIST_INSERT 
    AFTER INSERT ON PURCHASE_HIST
    FOR EACH ROW 
BEGIN
        UPDATE VIDEO_GAME
		SET VG_COPIES_OWNED = VG_COPIES_OWNED + new.NUM_PURCHASED  WHERE VG_ID = NEW.VG_ID;
        
END$$
DELIMITER ;

ALTER TABLE EMPLOYEE
	ADD CONSTRAINT unique_employee UNIQUE (EM_SS_NUM);

ALTER TABLE VIDEO_GAME
	ADD CONSTRAINT unique_games_and_location UNIQUE (VD_ID, BR_ID);
    
ALTER TABLE CUSTOMER
	ADD CONSTRAINT unique_customer UNIQUE (CU_LAST_NAME, CU_PHONE_NUM);
    
